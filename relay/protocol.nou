%%%%% Protocol
Re-invent UDP-like over any other protocol/media.
Additional level of indirection.

TODO
  !!! [_] FIND distributed/remote/secure evaluation
    SEE system clocks and timestamps
    [_] http://books.ifmo.ru/book/1403/vvedenie_v_raspredelennye_vychisleniya.htm
      https://habrahabr.ru/post/232361/

%% Msg
  Format
    ask ( type, id/timestamp, dst, body )
    rsp ( type, id/timestamp, dst, body )

    type: may be single letter with fixed length body afterwards
      'rsp' can be capital letter to distinguish direction
      = NEED for unpacking objects (pickle-like)

    id-timestamp:
      id = timestamp: WARN: may become non-unique due to sys clock discrepancies
        BAD: by hacking timestamp you can alter cmds order and interleave with cmds from another client
      id = cmd: BAD performance for large cmd/selection -- no sense to send them back to client
      id = hash('cmd'): WARN: isn't enough for multiple identical cmds or same cmd from diff clients
      id = hash(('cmd', 'time', 'client')): too complex ?

    body: cmd/rsp
      maybe gzip

  Ignore msg/rsp relative order
    cmd can activate slow bkgr task, which results will be delivered long after multiple msg transactions
    NEED identify which req asked for this rsp (use id/timestamp)

  msg has addressee
    Using addressee guarantees fastest delivery
      All transit msgs must be sent immediately
        don't store into queue == reduce delivering latency for re-emitting from queue
    DFL:
      _parent_ responsible for processing -- on *mod*'s own tree branch
      _returnee_ where to send msg after processing
    target
      -t core
      -t view
      -t self
    broadcast
      -t all
      -t neighbors
      -t ui/all
      -t all/ui


%% Channel
  queue multiple msgs
    save each msg to queue and continue wait on socket
    mark msg by emitter for response (add back-ref to client)
      ~ directly use ref to explicitly call client code
      ~ use 'id' to resolve it into client
        BETTER :: allows to use write queue
        http://stackoverflow.com/questions/10605083/python-asyncore-keep-track-of-clients
  special 'cancel <op>' msg to reset queue
    what receiving data format to be expected to 'cancel' at any time ?
  reply to same client
    embed returning 'id'
  broadcast *dom* state change
    do it until *ui* and only there make decision to update *cursor*
      = make updating _on demand_ only
  msg => cmd => class
    search handler by type/class
      = Haskell way
      = C++ polymorphisms
    easier to process/split cmds queue/pool
  cmd authentication (check access/ops permissions), logging
    NEED formal dispatcher between cmd and handler
  cmd => event
