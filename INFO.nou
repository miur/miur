%%%%% IDEA
*Ranger done right*
Refactoring and evolution
Microkernel relay in fm world
++ Accessibility
  add key hooks to TTS dirs content for blind people

TODO
  [_] move ideas from 'term/ranger'
  [_] move ideas from 'nou.vim'
  [_] IDEA:SEE Emacspeak's table browsing functionality (online docs)
    = richest collection of end-user affordances for working with two-dimensional data.
    + MAYBE useful for my graph representations
  [_] THINK audio notions for working with text
  [_] Combine skeleton from ready-to-use libs
    * borrow ideas from neovim
    * write glue in whatever hell there is
    ! postpone more decisions for better arch, more drop-in replacements !
    http://libuv.org/
      https://github.com/libuv/libuv
    https://github.com/ClusterLabs/libqb
    https://habrahabr.ru/company/centosadmin/blog/323556/
  [_] NEED: fault-tolerance for server part to continue to work
  [_] NEED: ifc sep to impl audio ifc !

Fork
  ? is there need for compatibility with python2 ?
  ? MAYBE use C++ or haskell instead of python ?
  I can use 'ranger' as prototype and integrate my ideas there first
  \ and then use its architecture and found flaws to develop C++/haskell variant
    FIND concrete code parts to rewrite which I will touch
      = attach refs to the issue
      = point concrete actions I will take in rewriting
    Gather more usecases which demand such refactoring
  ALSO:(reverse-prototype) I can develop simple skeleton with my splitted
  \ architecture to test my vision before refactoring ranger codebase in its direction
    * it also allows to test ideas directly in my small framework
    * this prototype will be the first step for haskell port

Deps
  http://suckless.org/rocks
  https://gist.github.com/XVilka/8346728
  http://wiki.musl-libc.org/wiki/Alternative_libraries


Goal
  ship/activate only necessary subset of modules for each OS/distribution
    => like another TUI on Windows, etc
  complete abstraction ui layer
    to be able to test ifc with unit/mock
  providing universal DOM
    show graphs to user
    allow to apply commands


Usability
  tiling WM -- many instances in many terminals
  low usability of task manager
  low usability of preview window


Performance
  slow access / dir listing
    kernel/firmware sources
    always slow flattening
    when I need load all recursive -- for 'ag' search results


splitted modules
  don't load all python code at once
  future extensibility


Problems with functionality
  vim great -- because it's somewhat more universal interface than ranger
  slow fs -- like network fs with slow ping : sshfs, curlfs, nfs, imapfs
    > disable metainfo/preview only for choosen dirs
  many hardcoded defaults/routines which are impossible to extend/disable
    ~ like using file.basename in directory.py/refilter()
    ~ or always loading file metainfo on directory read
  open vim inside ranger inside vim -- need to return action
