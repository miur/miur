⌇⡡⣈⠔⢥

2021-11-19-Fri-W46
  [_] ^⡡⣈⠔⢥ #eventdb infer API-RQ first -> pick IMPL-PERF later ⌇⡡⡙⠬⡇
    [_] #feed add two sqlite -- as eventdb basis and as view ⌇⡡⢚⢞⡐
    [&] ⌁ DEV initial #eventdb in !just ⌇⡡⢫⢊⢚
    [_] MAYBE: very simple global event-db based on lmdb-append by key=time[long]
      FUTURE: compile it into semantic-db or archive into immudb
    TRY:DEP: lmdbjava/native: LMDB Native Libraries Automatic Build Repository ⌇⡡⡚⢝⡅
      https://github.com/lmdbjava/native


2021-12-25-Sat-W51
  [_] ^⡡⣈⠔⢥ !miur initial IMPL :: simple list-picker ⌇⡡⡓⣔⣵
    [⡡⣆⣷⡽] ✗ 2h TRY ncurses 6.1 colors ※⡡⣆⣹⢇
    [_] DEV cursor ⌇⡡⢬⢋⠞
    [_] FUTURE:TRY: abstract-away color/attribute information from all text blocks
      * category (colorscheme) -- like ranger filetypes and infotypes
      * palette (color pairs) -- for fast hacking using ncurses
      * rgb (direct colors) -- for fast hacking vim-like
      * raw (sanitized escape codes) -- for fast hacking TrueColor caps
      * markup/qml (<b>xml</b>) -- for more complex outputs
      * markdown (*bold*)
    [_] FUTURE:TRY: abstract-away line-list-widget hierarchy from TUI, QT, OGL
      IDEA: create data "description" i.e. DOM, and then visitor.interpret() it by renderer (e.g. Qt)
        i.e. access dynamic property List.LineRange[b,e].line[i].color
      NEED: event-driven access to everything
        e.g. change color event -> modifies DOM -> updates GUI


2022-01-17-Mon-W03
  [_] SEE: rothgar/awesome-tuis: List of projects that provide terminal user interfaces ⌇⡡⣥⢴⠚
    https://github.com/rothgar/awesome-tuis
  [⡡⣦⠪⠇] ✓ 1h40m #live ALT:TRY: run main QApp in bkgr thread ⌇⡡⣦⠝⣹
    INFO:: G: qt run qapp from another thread
      c++ - creating QApplication in a different thread - Stack Overflow ⌇⡡⣥⡴⣙
        https://stackoverflow.com/questions/25349081/creating-qapplication-in-a-different-thread
      HOw to use QApplication on a separate thread other than the main thread? | Qt Forum ⌇⡡⣥⡴⣟
        https://forum.qt.io/topic/44245/how-to-use-qapplication-on-a-separate-thread-other-than-the-main-thread
      Starting QT GUI in a seperate Thread ⌇⡡⣥⡵⢷
        https://www.qtcentre.org/threads/16552-Starting-QT-GUI-in-a-seperate-Thread
      [⡡⣥⡵⡡] ‼ Running QApplication::exec() from another thread (QCoreApplication, QGuiApplication) | Qt Forum ⌇⡡⣥⡵⡇
        https://forum.qt.io/topic/124878/running-qapplication-exec-from-another-thread-qcoreapplication-qguiapplication/2
        * the Qt "main thread" is the first thread to create a QObject instance.
        * Only one QCoreApplication instance can be created at a time (or it's derivatives).
        * It should be created in the Qt "main thread" (which should also be its thread affinity).
        * Its exec() function starts the main event loop, and should be run from the Qt "main thread".
        ‼ Do create all QWidget objects in the same thread as QApplication.
      QApplication not created in main thread() | Qt Forum ⌇⡡⣦⠙⠴
        https://forum.qt.io/topic/84485/qapplication-not-created-in-main-thread
      c++ - How to avoid Qt app.exec() blocking main thread - Stack Overflow ⌇⡡⣦⠙⡇
        https://stackoverflow.com/questions/22289423/how-to-avoid-qt-app-exec-blocking-main-thread/22290909#22290909
        ‼ GUI classes must only be accessed from the thread which instantiates QApplication/QGuiApplication
    [X] ERR: WARNING: QApplication was not created in the main() thread.
      HACK: import from PyQt must be started inside bkgr thread too
        ⦅python⦆ thr = Thread(target=lambda: __import__("HelloOpenGL").run())
      FAIL: bkgr thread still does not work properly
        ¦ QObject::killTimer: Timers cannot be stopped from another thread
        ¦ QObject::~QObject: Timers cannot be stopped from another thread
        ¦ qt.qpa.xcb: xcb_shm_detach() failed with error: 128 (Unknown), sequence: 6611, resource id: 33554469, major code: 130 (Unknown), minor code: 2
        ¦ (process:29311): GLib-CRITICAL **: 03:53:39.889: g_main_context_pop_thread_default: assertion 'stack != NULL' failed
        ¦ double free or corruption (out)
        ¦ [1]    29311 abort (core dumped)  python TryQtBkgr.py
    [⡡⣦⠤⡨] ✓ BET:TRY:HACK: integrate with IPython event loop
      Integrating with GUI event loops — IPython 8.0.0 documentation ⌇⡡⣦⠟⢀
        https://ipython.readthedocs.io/en/8.0.0/config/eventloops.html
        %gui qt5
        CFG: c.InteractiveShellApp.gui = "qt5"
      I am having major issues using Matplotlib with IPython ⌇⡡⣦⠢⣄
        https://www.reddit.com/r/IPython/comments/5nfh77/i_am_having_major_issues_using_matplotlib_with/
        https://www.reddit.com/r/Python/comments/5n84mj/ipython_shell_with_matplotlib_the_qt_windows/
        = this creates a QApplication so your code will need to use QApplication.instance()
      ::: USAGE:
        * %gui qt5
        * don't create QApplication
        * you may directly create QT window/etc
  [_] FAIL: reload class method in instances
    Sample of reloading a class definition in python. Old and new instances point to the correct class definition. ⌇⡡⣦⠧⣘
      https://gist.github.com/javierarilos/6009059


2022-02-01-Tue-W05
  [_] #miur reuse !ipython as proper cli ifc ⌇⡡⣹⢽⢡
    << main idea of #miur -- is unified "list" repr for many different filetypes
    >> in same way I may provide unified python API to access these lists and manipulate directly in python
      e.g. sometimes it's easier to drop into ipython and directly manipulate current dir filelist to batch-rename by pattern
        NEED: some kind of welcoming "help" on ipython-enter ++ kind of "discovery" mechanics to know which api are available
        ALSO:NEED: short aliases to many ops and proper long names of cmds and data fields


2022-03-07-Mon-W10
  [_] TODO: pick &next
    [⡊⡴] DEV in jupyter ERR C.cbreak()
    [⡊⡴] RFC:USE jupyter %gui asyncio
    [⡊⡵] DEV do action per item
    [_] RFC cursor ※⡡⢬⢋⠞
    [_] ^⡡⣈⠔⢥ #eventdb infer API-RQ first -> pick IMPL-PERF later ※⡡⡙⠬⡇
  [_] WF
    [%] #mt:=maint pacman-aur info
      [_] TODO: attach info to node
        = instead of exe(info) printing -- insert it back into DOM node
          to be immediately available when focused on node w/o repeated keypresses
    [_] #cb:=clipboard history navi
    [_] #fm:=filemanager list-picker ※⡡⡓⣔⣵
    [_] #sb:=statusbar render !xmobar as yaml-like list of data
  [_] TODO: #miur as-library
    = so other developers could reuse parts of #miur instead of rewriting from scratch
      + at least part of my code will be maintained by others


2022-03-08-Tue-W10
  [⡢⠧⠴⠳] 8h ^⡡⣈⠔⢥ #miur DEV in jupyter ERR C.cbreak() ⌇⡢⠩⡯⡩
    [X] FIND: where ifd or STDIN_FILENO may be used
      NCURSES_SP_NAME(newterm) (NCURSES_SP_DCLx
        SP_PARM->_ifd = fileno(_ifp);
      if (Filedes == STDOUT_FILENO && !NC_ISATTY(Filedes))
        Filedes = STDERR_FILENO;
      typedef struct screen {
          int		_ifd;		/* input file descriptor for screen */
          int		_ofd;		/* output file descriptor for screen */
    [X] FAIL: hardcoded stdout/stdin FDs
      //base/lib_initscr.c:93 initscr(void)
        if (newterm(name, stdout, stdin) == 0) {
      [X] TRY: always redirect only fd0 and fd1
    [X] MAYBE: we don't need C.setupterm() at all
      SEE:OFF: curses.py
      # we call setupterm() here because it raises an error
      # instead of calling exit() in error cases.
  [⡢⠧⢉⢑] 1h30m ^⡡⣈⠔⢥ #miur RFC:USE jupyter %gui asyncio
    COS: otherwise I can't edit functions during running main()
  [_] FUTURE !python inotify ^⡢⠩⡯⠶
    https://asyncinotify.readthedocs.io/en/latest/
    https://pypi.org/project/inotify-simple/
    READ https://github.com/dsoprea/PyInotify
      https://pypi.org/project/inotify/
    OLD: https://github.com/seb-m/pyinotify


2022-03-09-Wed-W10
  [X] 1h ^⡡⣈⠔⢥ #miur DEV do action <CR> per item
  [X] 6h ^⡡⣈⠔⢥ #miur RFC
    [X] 3h RFC wait on fd0 for input out of loop
    [X] 1h quit from app on <q>
    [X] 1h get new W/H on term resize()
    [X] 1h limit FPS for output
    [10%] 1h/ RFC:ARCH: ⸢Application⸥ and ⸢Device⸥


2022-03-10-Thu-W10
  [%⡊⡵] 3h ^⡡⣈⠔⢥ #miur RFC:ARCH: ⸢Application⸥ and ⸢Device⸥
    [_] !python sudo
      [X] TEMP:IMPL pass-through to same tty
  [_] ^⡡⣈⠔⢥ #miur THEO modal kbd :: class PacmanMode, etc. ⌇⡢⠩⡭⢧
    = using vim-like modes solves a *problem*:
      * hw: limited number of keys on keyboard (not all functions are mappable)
      * brain: our mind can't pick and *hold* (≈remember) what is most important in overwhelming details
      * energy: mental drain exponentially increases when you can't focus on small set of actions
      * automation: small set of repeatable actions allows to remember decision tree and skip all active decision making
      * ergo: body/hands have limitations on keys placement and muscular strain to press them
      * memory: it's hard to remember what to press to achieve what you need,
        or even remember what you can use (leaving only vague feeling)
    ex:
      "flow/workflow" concept solves same issues -- but additionally it helps to preserve order/timeline of actions
      grouping API into menu -- solves issue of mental overload during studying, even if API will be used only by SW


2022-03-11-Fri-W10
  [•] 4h ^⡡⣈⠔⢥ #miur RFC:ARCH: ⸢Application⸥ and ⸢Device⸥
  [_] FUTURE:TRY: Using Filters to impart contextual information ⌇⡢⠪⣴⠽
    https://docs.python.org/3/howto/logging-cookbook.html#filters-contextual
  [%] 30m ^⡡⣈⠔⢥ #miur ARCH modal kbd ⌇⡢⠪⣏⢗
    [_] MAYBE: group "kbd input fragments" with "dom data source" and "widget output fragments"
      NICE:(visual coupling): direct relation between "what you see", "how it's structured" and "how you can manipulate"
      ALSO:(code coupling): input-frag always needs access to show-frag -- to scroll, move cursor, etc.
      e.g. dom="pacman -Qi", widget=List, input=PacmanFrag
    [_] BET: attach input-frag to ⸢Item⸥ instead of show-frag or even whole ⸢Widget⸥
      ~~ keybindings will dynamically change from item to item -- allowing having mixed lists
      ‼ still some input-frags should be attached to show-frag as whole -- to apply unique actions,
        inherent from the reason why all these mixed items were added to single union ⸢Widget⸥
        [_] call same function on each item e.g. "load lazy data", or "generate preview"
        [_] sort whole list by same field
        [_] filter list by predicate
    [_] ‼ each keybinding should be a sep class with .call(ctx) method
      -- where ctx bounding is early or late (deferred till execution)
      ALSO: provide Io.KeyBindFactory(frag, "M+k",lambda) for ease/compactness of mass-creating new hotkeys
  [_] DEV multi-cell Item for tabular output
    e.g: pacman -- show name, version, number of direct/reverse deps
      BAD: may require preloading all data at once
