
2022-07-11-Mon-W28
  [‚°¢‚£å‚¢ë‚¢≤] üíú 6h45m /2h ^‚°ò‚†ç‚†∂‚°† DEV #miur !skim in CL ‚Äª‚°¢‚£Ü‚£É‚°∂
    [X] 35m INFO: misc
    [%] 1h30m FIND DOM backend
    [‚úó‚°ä‚£∞] 20m FIND: nanosecond timestamps
    [/] / 25m #feed:lisp READ: gamedev ‚Äª‚°¢‚£å‚†º‚¢´ ‚Äª‚°¢‚£å‚†º‚¢∫
    [X] 35m READ CLOS intro
    [‚°¢‚£å‚°Æ‚°ú] 1h30m WF tight dev-loop // #nvim mappings, croaton-submit, etc.
      [‚â´] SEE: How to Set Up a Common Lisp IDE in 2021 | by Gwang Jin Kim | Towards Data Science ‚åá‚°¢‚£å‚°Æ‚¢¥
        https://towardsdatascience.com/how-to-set-up-common-lisp-ide-in-2021-5be70d88975b
        setup/teardown tests
    [‚°¢‚£å‚°∫‚°¥] 50m FIND list data structs / comprehension
    [‚°¢‚£å‚¢ë‚¢Ø] 1h25m TRY: create CLOS for facts
  ***
  [X] 35m INFO: misc
    [‚°¢‚£å‚†∞‚¢Ω] SEE comments - Lisp commenting convention - Stack Overflow ‚åá‚°¢‚£å‚†∞‚¢¥
      https://stackoverflow.com/questions/6365334/lisp-commenting-convention
    [‚°¢‚£å‚†µ‚†ú] Really great reference (FREE) : lisp ‚åá‚°¢‚£å‚†µ‚†ï
      https://www.reddit.com/r/lisp/comments/vuxbbl/really_great_reference_free/
      OFF http://clqr.boundp.org/download.html
    [‚°¢‚£å‚†µ‚¢¥] Lulu xPress | The fastest and easiest way to Print on Demand ‚åá‚°¢‚£å‚†µ‚†∑
      https://xpress.lulu.com/
      NICE: $20 / 200pg –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Å–≤–æ—é –∫–Ω–∏–≥—É
    [‚°¢‚£å‚°é‚°™] CLiki: the-cost-of-nothing ‚åá‚°¢‚£å‚°é‚°°
      https://www.cliki.net/the-cost-of-nothing
    [_] TRY: CLiki: journal ‚åá‚°¢‚£å‚†∏‚¢î
      https://www.cliki.net/journal
    [_] Haskell Lisp - HaskellWiki ‚åá‚°¢‚£å‚†π‚¢∑
      https://wiki.haskell.org/Haskell_Lisp
      [_] NICE Shen Open Source Language ‚åá‚°¢‚£å‚†π‚£∑
        https://shen-language.github.io/
        [_] Shen-Language/shen-cl: Shen for Common Lisp ‚åá‚°¢‚£å‚†∫‚†π
          https://github.com/Shen-Language/shen-cl
      [_] ALT:BET? extend lisp by static typing
        coalton-lang/coalton: Coalton is an efficient, statically typed functional programming language that supercharges Common Lisp. ‚åá‚°¢‚£å‚†∫‚°¶
          https://github.com/coalton-lang/coalton
    [_] CLOG And The Competition : lisp ‚åá‚°¢‚£å‚†º‚†≤
      https://www.reddit.com/r/lisp/comments/vtrlfy/clog_and_the_competition/
      interactive-ssr/issr-server: The universal ISSR server compatible with <your-favorite-programming-language> ‚åá‚°¢‚£å‚†º‚°≥
        https://github.com/interactive-ssr/issr-server
  [%] 1h30m DOM backend
    [%] 50m FIND triple store
      [‚°¢‚£å‚†°‚£ê] NICE Lisp, the Universe and Everything: Why RDF* Is a Mess... and How to Fix It ‚åá‚°¢‚£å‚††‚£™
        http://lisp-univ-etc.blogspot.com/2020/10/why-rdf-is-mess-and-how-to-fix-it.html
      [‚°¢‚£å‚°∫‚¢§] ‚úó NICE:TRY: facts-db/cl-facts: Graph database in Common Lisp ‚åá‚°¢‚£å‚†§‚£¨
        https://github.com/facts-db/cl-facts
          ::: FAIL: does not support "graph"/quads concepts to snapshot data iterations
            ALSO: probably it treats all same values as same instance (BAD for nested folders with same name)
        NICE: even has C99 re-impl (if needed)
          facts-db/facts_db: Graph database in C99. ‚åá‚°¢‚£å‚†ß‚°ú
            https://github.com/facts-db/facts_db
        ::: @me DEV: probably it's easier to create my own triple-store for my purpose,
          which will combine UUID and TS log-db with semantic graph-db at the same time
          [>] BUT:USE: parts of the code of cl-facts
          [_] THINK: how to add "add/del new triple" as part of the log-language to preserve in DB?
            &why to preserve full ops history -- even when removing nodes -- do it by adding more nodes
              COS actually I never delete anything from graph -- only modify current tip (HEAD) representation
      VIZ: Common Lisp libraries overview ‚åá‚°¢‚£å‚†£‚¢ë
        https://common-lisp.net/libraries
        Dimercel/listopia: List manipulation library inspired by Haskell package Data.List ‚åá‚°¢‚£å‚†•‚£î
          https://github.com/Dimercel/listopia
        sirherrbatka/cl-data-structures: Data Structures and streaming algorithms for Common Lisp. ‚åá‚°¢‚£å‚†•‚££
          https://github.com/sirherrbatka/cl-data-structures
        danlentz/cl-ctrie: lock-free, concurrent, key/value index with efficient memory-mapped persistence and fast transient storage models ‚åá‚°¢‚£å‚†¶‚†ë
          https://github.com/danlentz/cl-ctrie
        ndantam/sycamore: A fast, purely functional data structure library in Common Lisp. ‚åá‚°¢‚£å‚†¶‚†°
          https://github.com/ndantam/sycamore
      kraison/vivace-graph-v3: VivaceGraph version 3. Open source Common Lisp graph database & Prolog implementation. Supersedes http://github.com/kraison/vivace-graph-v2. ‚åá‚°¢‚£å‚†£‚¢â
        https://github.com/kraison/vivace-graph-v3
        NOTE: considering PERF issues, maybe don't invent the wheel
        kraison/graph-utils: graph analysis tools in Common Lisp ‚åá‚°¢‚£å‚†£‚£ì
          https://github.com/kraison/graph-utils
      CLiki: RDF ‚åá‚°¢‚£å‚†®‚¢¶
        https://www.cliki.net/rdf
        CLiki: swclos ‚åá‚°¢‚£å‚†©‚£ä
          https://www.cliki.net/swclos
    [%] 20m TRY:USE: lmdb as a back store
      antimer/lmdb: LMDB bindings for Common Lisp ‚åá‚°¢‚£å‚†±‚£¶
        https://github.com/antimer/lmdb
        = lmdb-20220220-git
        OLD: liblmdb-20170830-git
      [‚°¢‚£å‚°ê‚¢â] TODO:NICE:TUT: Using LMDB from Common Lisp ‚åá‚°¢‚£å‚†¥‚°ã
        https://borretti.me/article/lmdb-from-common-lisp
      [_] Re: LMDB safety under misuse ‚åá‚°¢‚£å‚†π‚†Ñ
        https://www.mail-archive.com/openldap-technical@openldap.org/msg25015.html
    [%] 20m NICE:IDEA: store directly Lisp
      CLiki: manardb ‚åá‚°¢‚£å‚†∑‚£Ö
        https://www.cliki.net/manardb
        https://github.com/danlentz/manardb
      CLiki: CommonLispPrevalence ‚åá‚°¢‚£å‚†∂‚°º
        https://www.cliki.net/CommonLispPrevalence
      [_] OR: CLiki: persistence ‚åá‚°¢‚£å‚†∂‚†Å
        https://www.cliki.net/persistence
        Virtual-Insurance-Products/cldb ‚åá‚°¢‚£å‚†∂‚†∑
          https://github.com/Virtual-Insurance-Products/cldb
          BAD: only Clozure
  ---
  [‚úó‚°ä‚£∞] 20m FIND: nanosecond timestamps
    nanosecond-resolution time stamps ‚åá‚°¢‚£å‚°é‚¢ë
      https://emacs-devel.gnu.narkive.com/5VgL1njb/nanosecond-resolution-time-stamps
    How to get unix epoch in milliseconds in Common Lisp - DEV Community ‚åá‚°¢‚£å‚°é‚£Ø
      https://dev.to/veer66/how-to-get-unix-epoch-in-milliseconds-in-common-lisp-4106
    Dates and Times ‚åá‚°¢‚£å‚°è‚†Å
      https://lispcookbook.github.io/cl-cookbook/dates_and_times.html
  [‚Ä¢] 35m TUT CLOS
    [_] REF Fundamentals of CLOS ‚åá‚°¢‚£å‚°î‚£ï
      https://lispcookbook.github.io/cl-cookbook/clos.html
    [‚°¢‚£å‚°ó‚¢Æ] TUT LISP - CLOS ‚åá‚°¢‚£å‚°î‚£õ
      https://www.tutorialspoint.com/lisp/lisp_clos.htm
    [_] A Brief Guide to CLOS ‚åá‚°¢‚£å‚°î‚£¶
      https://www.algo.be/cl/documents/clos-guide.html
    [‚°¢‚£å‚°ò‚£Å] VIZ CLiki: CLOS ‚åá‚°¢‚£å‚°î‚£´
      https://www.cliki.net/CLOS
    [_] RU: –ú–µ—Ç–∞–æ–±—ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª Common Lisp –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–Ω–æ–π –æ–±—ä–µ–∫—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã / –•–∞–±—Ä ‚åá‚°¢‚£å‚°î‚£≤
      https://habr.com/ru/post/230619/
    [!] ALSO: Type System ‚åá‚°¢‚£å‚°ª‚°∏
      https://lispcookbook.github.io/cl-cookbook/type.html
    [_] The Common Lisp Object System ‚åá‚°¢‚£å‚¢ã‚¢ñ
      https://courses.cs.northwestern.edu/325/readings/clos.php
    [‚Ä¢] java - Class introspection in Common Lisp - Stack Overflow ‚åá‚°¢‚£å‚¢å‚£ë
      https://stackoverflow.com/questions/742154/class-introspection-in-common-lisp
  ~~~
  [‚°¢‚£å‚°∫‚°¥] 50m FIND list data structs / comprehension
    [‚Ä¢] compile time - In Common Lisp, when do you need to use eval-when, and how do you know? - Stack Overflow ‚åá‚°¢‚£å‚°Ø‚¢î
      https://stackoverflow.com/questions/45665951/in-common-lisp-when-do-you-need-to-use-eval-when-and-how-do-you-know
    [‚°¢‚£å‚°≤‚†Ç] cons - Wikipedia ‚åá‚°¢‚£å‚°±‚£∑
      https://en.wikipedia.org/wiki/Cons
    [‚°¢‚£å‚°≤‚°ä] Common Lisp/Basic topics/Lists - Wikibooks, open books for an open world ‚åá‚°¢‚£å‚°≤‚°à
      https://en.wikibooks.org/wiki/Common_Lisp/Basic_topics/Lists
    [‚â´] Data structures ‚åá‚°¢‚£å‚°≤‚°º
      https://lispcookbook.github.io/cl-cookbook/data-structures.html
    [‚Ä¢] lisp-list-comprehensions/list-comprehensions.lisp.md at master ¬∑ fredokun/lisp-list-comprehensions ‚åá‚°¢‚£å‚°¥‚¢≠
      https://github.com/fredokun/lisp-list-comprehensions/blob/master/list-comprehensions.lisp.md
      OR: List comprehension in Lisp : lisp ‚åá‚°¢‚£å‚°¥‚£Ω
        https://www.reddit.com/r/lisp/comments/fay664/list_comprehension_in_lisp/
      CLiki: List Comprehension ‚åá‚°¢‚£å‚°µ‚†®
        https://cliki.net/List comprehension
    [‚°¢‚£å‚°∑‚£∂] Any ways to allocate flattened array of structure as C in Common Lisp? - Stack Overflow ‚åá‚°¢‚£å‚°∑‚£ä
      https://stackoverflow.com/questions/29008545/any-ways-to-allocate-flattened-array-of-structure-as-c-in-common-lisp
    [_] VIZ: CLiki: Data formats ‚åá‚°¢‚£å‚°∑‚£î
      https://cliki.net/data formats
    [‚°¢‚£å‚°∏‚¢è] ‚úì Do you start with a struct or a class? ‚åá‚°¢‚£å‚°∏‚¢â
      https://lisper.in/do-you-start-with-a-struct-or-a-class
      ::: WF: USE "defclass" fst (for IA-redefine) and fallback to "defstruct"
        (OR even "cons") only for PERF after that
    [_] TRY: sellout/quid-pro-quo: A contract programming library for Common Lisp in the style of Eiffel‚Äôs Design by Contract‚Ää‚Ñ¢. ‚åá‚°¢‚£å‚¢Ñ‚††
      https://github.com/sellout/quid-pro-quo
  [‚â´] TRY:
    hellerve/sbcli: A REPL for my SBCL needs ‚åá‚°¢‚£å‚°†‚†™
      https://github.com/hellerve/sbcli
    koji-kojiro/cl-repl: A full-featured repl implementation designed to work with Roswell ‚åá‚°¢‚£å‚°†‚†∑
      https://github.com/koji-kojiro/cl-repl
    CLiki: system programming ‚åá‚°¢‚£å‚°º‚¢Ç
      https://www.cliki.net/system programming
