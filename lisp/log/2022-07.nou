
2022-05-16-Mon-W20
  [_] realized: probably unifying #fm over FUSE is a better way to reduce #miur complexity
  [‚°¢‚¢Ç‚¢°‚°†] 10m THINK:IDEA: unify concepts of { filesystem + artifactory + tap-buildsystem }


2022-07-02-Sat-W26
  [‚Ä¢] 15m/ NICE:IDEA: rewrite #miur in CL ‚åá‚°¢‚£Å‚°≤‚£î
    szos/CLFM: Common Lisp File Manager ‚åá‚°¢‚£Ä‚£¶‚†ú
      https://github.com/szos/CLFM
    These Months in Common Lisp Q4 2018 - Lisp journey ‚åá‚°¢‚£Ä‚£´‚°ù
      https://lisp-journey.gitlab.io/blog/these-months-in-common-lisp-q4-2018/
      stacksmith / cl-fm ¬∑ GitLab ‚åá‚°¢‚£Ä‚£´‚°®
        https://gitlab.com/stacksmith/cl-fm
    Mixins in Common Lisp. Techniques for Modularity in Common‚Ä¶ | by Ashok Khanna | Medium ‚åá‚°¢‚£Ä‚£¶‚°É
      https://ashok-khanna.medium.com/mixins-in-common-lisp-92bf2a6c9bff
   #nvim
    Lua alternatives to vim-slime? : neovim ‚åá‚°¢‚£Ä‚£´‚°∏
      https://www.reddit.com/r/neovim/comments/ov7yhb/lua_alternatives_to_vimslime/
    ‚âà michaelb/sniprun: A neovim plugin to run lines/blocs of code (independently of the rest of the file), supporting multiples languages ‚åá‚°¢‚£Ä‚£´‚¢≠
      https://github.com/michaelb/sniprun
      ::: no lisp
      [_] ‚äû meain/vim-printer: Quickly print/log the variable in your favourite language ‚åá‚°¢‚£Ñ‚£ê‚†ê
        https://github.com/meain/vim-printer
    ‚âà hkupty/iron.nvim: Interactive Repl Over Neovim ‚åá‚°¢‚£Ä‚£¨‚†Ç
      https://github.com/hkupty/iron.nvim
      ::: simply repl
    ‚âà chadvoegele/nvim-slime ‚åá‚°¢‚£Ä‚£¨‚°º
      https://github.com/chadvoegele/nvim-slime
      ::: mostly PoC
    ‚âà naefl/kitty.nvim: Slime-like REPL for Neovim in Lua ‚åá‚°¢‚£Ä‚£¨‚¢Ü
      https://github.com/naefl/kitty.nvim
      ::: is it only for .py ?
    [‚°¢‚£â‚¢Ω‚£ö] –ù–∏—à–µ–≤—ã–µ –ø–ª–∞–≥–∏–Ω—ã Neovim ‚åá‚°¢‚£Ä‚£¨‚¢ö
      https://digitrain.ru/articles/83105/
      [_] ojroques/vim-oscyank: A Vim plugin to copy text through SSH with OSC52 ‚åá‚°¢‚£â‚¢Ω‚£ï
        https://github.com/ojroques/vim-oscyank
      [_] glacambre/firenvim: Embed Neovim in Chrome, Firefox, Thunderbird & others. ‚åá‚°¢‚£â‚¢Ω‚£Ä
        https://github.com/glacambre/firenvim
      [_] metakirby5/codi.vim: The interactive scratchpad for hackers. ‚åá‚°¢‚£â‚¢Ω‚°ò
        https://github.com/metakirby5/codi.vim
      kassio/neoterm: Wrapper of some vim/neovim's :terminal functions. ‚åá‚°¢‚£â‚¢Ω‚°ë
        https://github.com/kassio/neoterm
    [SOLVED] What is the correct/recommended way to run a shell command in NeoVim in the background? - Neovim - Neovim Discourse ‚åá‚°¢‚£Ä‚£¨‚¢ß
      https://neovim.discourse.group/t/solved-what-is-the-correct-recommended-way-to-run-a-shell-command-in-neovim-in-the-background/2130


2022-07-03-Sun-W26
  [_] 4h NICE: #miur (!skim) in CL ‚Äª‚°¢‚£Å‚°≤‚£î
    [?] TRY: is it feasible to develop in CL
      ~~ considering I wrap all .py resources into try-catch anyway
      * BAD: can't reuse pygit2
      * BAD: can't reuse code for "clipboard manager"
        [_] FIND: cb impl in lisp
          Developing a WM : lisp ‚åá‚°¢‚£Ç‚£ò‚£Ω
            https://www.reddit.com/r/lisp/comments/krixc1/developing_a_wm/
      * BAD: can't reuse ranger/qtile
      * THINK: why I dropped airywm dev in CL ?
    [_] CHECK: startup time
    [_] TODO: shell-out to shell and redirect its stdout back to read by #miur
      [_] use exclusion-list like !marcel to skip on ncurses/TUI prgs
        [$] ALT: auto-skip them by looking into ELF deps list
          ::: FAIL: it can be .py script


2022-07-08-Fri-W27
  [_] SEE: how to compile some .so and immediately call it from .py back
    https://habr.com/ru/post/674206/
    https://habr.com/ru/company/sportmaster_lab/blog/675880/


2022-07-09-Sat-W27
  [‚°¢‚£â‚£å‚£ó] üíú 1h15m ^‚°ò‚†ç‚†∂‚°† NICE: #miur (!skim) in CL ‚Äª‚°¢‚£Ü‚£É‚°∂ (no-shell ‚Äª‚°¢‚£Ä‚¢á‚¢ã)
    [‚°¢‚£â‚£Ç‚¢ê] 30m #nvim CMP .lisp plugins // #miur CL üíú
      ::: TRY !vlime first -> then only !slimv left of "true" swanks
    [‚°¢‚£â‚£å‚¢Ω] 45m #nvim CFG !vlime // #miur CL üíú
      [>] BAD: blocking, single-thread NEED: multithread


2022-07-10-Sun-W27
  [%] üíú 2h30m ^‚°ò‚†ç‚†∂‚°† DEV #miur !skim in CL ‚Äª‚°¢‚£Ü‚£É‚°∂
    [X] 1h #nvim CFG !vlime bindings // #miur CL üíú
      [X] BAD: blocking, single-thread NEED: multithread
        ::: USE :backend usocket
      [X] 15m TODO: immedate connect
        ['n', s:vlime_leader.'cc', ':call vlime#plugin#ConnectREPL("127.0.0.1",7002)<cr>', 'Connect to a server.'],
      [X] 30m hide REPL window ::: CFG default position
    [X] 30m IMPL wbs‚Äª‚°¢‚£Ü‚£É‚°∂
    [‚°¢‚£ã‚†å‚£´] 1h show item list in ncurses
  [+‚°ä‚£Ø] 5m FIND .lisp triple stores
    [X] https://html.duckduckgo.com/html?q=lisp%20triple
    [$] https://www.w3.org/2001/sw/wiki/LISP
    [%] https://cl-semantic.common-lisp.dev/index.shtml
    [%] https://en.m.wikipedia.org/wiki/Comparison_of_triplestores
    [%] https://allegrograph.com/products/allegrograph/
    [X] https://franz.com/about/press_room/trillion-triples.lhtml
  [_] USE: for my own CFFI
    The trivial-renamer Reference Manual ‚åá‚°¢‚£ä‚£∏‚°è
      https://quickref.common-lisp.net/trivial-renamer.html


2022-07-12-Tue-W28
  [%] üíú 1h40m ^‚°ò‚†ç‚†∂‚°† DEV #miur !skim in CL ‚Äª‚°¢‚£Ü‚£É‚°∂
    [+] 45m RFC ++ DFL=colors ++ resize() ++ info-panel
    [‚°¢‚£ç‚£ß‚¢ä] 45m colorized item list
    [X] 10m attrs for cursor


2022-07-13-Wed-W28
  [‚°¢‚£è‚†∏‚°ä] üíú 1h30m ^‚°ò‚†ç‚†∂‚°† DEV #miur !skim in CL ‚Äª‚°¢‚£Ü‚£É‚°∂
   WBS cursor ‚åá‚°¢‚£è‚££‚†Ñ
    [‚Ä¢] items
      [_] def ifc -- list to show
        << abstract away all DB work for future
      [‚°¢‚£è‚†∏‚†®] 1h defclass items -- with props
        [%] cvt myinput() to *items*
        [%] attrs per item type/props
      [_] associate attr/color with item type
        [_] allow special "raw" item type with unique out-of-table markup
    [_] WF
      [‚úó‚°¢‚£ê‚°æ‚¢Ç] 30m #nvim TODO: yank-blink when submitting top-form
        * USE vlime#ui#CurTopExpr(v:true) -> position [data, [b,c], [e,d]]
        * manually pass vlime#plugin#SendToREPL(data) only, and use pos for hi
        * USE lua.on_yank() to blink inside region
          [_] FAIL: does not blink for setreg(), NEED <"zy> motion over region
    [_] cursor
      [_] move cursor over fixed list
      [_] scroll list on edges
      [_] show multi-line items
    [_] selectors for DB
      [_] snapshot :: historical state
      [_] node :: folder in FS tree
      [_] kind :: files/metadata/lines
      [_] view :: limited window viewport
    [‚â´] selections
  ---
  [X] 30m READ defmethod
  [_] PERF of used ops
    common lisp - Are MAPCAR, MAPC, and MAP compiled to similar code when result is ignored? - Stack Overflow ‚åá‚°¢‚£è‚†∞‚¢å
      https://stackoverflow.com/questions/19071338/are-mapcar-mapc-and-map-compiled-to-similar-code-when-result-is-ignored
      (gc :full t)
      (time
        (progn
          (dotimes (ignored 1000)
            (mapcar #'+ lis1 lis2))
          (format t "mapcar:~%")))


2022-07-14-Thu-W28
  [%] üíú 2h5m /1h ^‚°ò‚†ç‚†∂‚°† DEV #miur !skim in CL ‚Äª‚°¢‚£è‚££‚†Ñ
    [+] ‚äû 50m READ: quickref CL [23/57]
    [X] 10m CHG? (defparameter *dom* (mapcar 'make-item (myinput)))
      BAD: db should contain RAW values, which are converted to ITEM by ctx analyzer only on demand
      BUT:FAIL: in that case we won't be able to QUERY for analyzed items -- only for RAW
      ::: db should contain ITEMs data -- but in RDF form inof ready-to-use ITEM class instances,
        -> [‚â´] USE ITEM API as a transparent proxy to DB
      [‚â´] FUT:IDEA:HACK: precached db queries -- for faster gradual access to all related metadata to display in UI
        << transient/fleeting data structure -- temporarily spend RAM for faster access
        ex:: learn usual sequences of queries to DB
          -- and pre-store their results during initial DB scan for first "obj"
    [‚úó‚°¢‚£ê‚°æ‚¢Ç] 30m #nvim TODO: yank-blink when submitting top-form
    [‚°¢‚£ê‚¢õ‚¢æ] 35m RQ !rg integ ASAP // feedback-loop
  ---
  [_] SEIZE:REF
    lotabout/skim: Fuzzy Finder in rust! ‚åá‚°¢‚£ê‚¢Ü‚†¢
      https://github.com/lotabout/skim
    junegunn/fzf: A command-line fuzzy finder ‚åá‚°¢‚£ê‚¢Ü‚†ö
      https://github.com/junegunn/fzf
  [‚â´] IDEA: add sfx (ex:: "airy (*)") to symbolize directory with shell cmds output attached
    << in this way I may spot in which dirs I run #miur.skim and look into its results again
    [_] ALSO: need global flat chronology of all commands I run with their output -- to jump into any output


2022-07-16-Sat-W28
  [_] NICE:FUTURE:ARCH
    [_] THEO: smart pipeline is bad, COS you must delete tail and re-execute to remember what are you filtering
      BET: #miur with history snapshots to traverse back-n-forth
      ex:: pipe into alias ¬∑ Discussion #4225 ¬∑ nushell/nushell ‚åá‚°¢‚£í‚¢¥‚†¨
        https://github.com/nushell/nushell/discussions/4225
    [_] IDEA: reuse their cheatsheets for my cmdlists
      denisidoro/navi: An interactive cheatsheet tool for the command-line ‚åá‚°¢‚£í‚£©‚¢ñ
        https://github.com/denisidoro/navi


2022-07-17-Sun-W28
  [!] ENH
    [‚â´] DFL: inof all lines (rg "") -- find and print all filenames (PERF)
      << NOTE: already did in !fzf by using "initial query"
    [_] switch between search snapshots -- to search iteratively in same textlines
      [_] NOTE:USE: !rg --context to include more lines around match into next iteration search
        [_] NEED: multiline items to show everything at once
        [_] NEED: separate "name" and "text" for each item
      [_] SEE: how !ranger WF looks like for <;> filters
    [_] TODO on <F> strip line information and keep only filenames
      -- to search in same set of files, but on all lines inof only printed ones


2022-07-18-Mon-W29
  [_] REF reuse code
    minad/affe: affe.el - Asynchronous Fuzzy Finder for Emacs ‚åá‚°¢‚£ï‚°á‚°•
      https://github.com/minad/affe
