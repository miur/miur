#!/usr/bin/env zsh
#%SUMMARY: central control panel
#%USAGE: $ ./$0 <cmd>
set -o errexit -o noclobber -o noglob -o nounset -o pipefail
setopt warn_nested_var warn_create_global
setopt local_options no_function_argzero
cd $0:A:h
declare -A fn_alias


fn_alias[pkg]=install-develop
function install-develop {
  makepkg PKGBUILD --syncdeps --clean --install --noconfirm --force
}


fn_alias[i]=cli
function cli {
  # TRY:FAIL? --eval "(setf (readtable-case *readtable*) :preserve)" \
  # rlwrap sbcl --noinform --eval '(require :asdf)' --eval "(progn
  #   (push '*default-pathname-defaults* asdf:*central-registry*)
  #   (asdf:load-system :miur)
  # )"
  # FIXED? different ":cl" package handling between Common Lisp implementations - Stack Overflow ⌇⡣⡍⢩⡋
  #   https://stackoverflow.com/questions/61378192/different-cl-package-handling-between-common-lisp-implementations
  exec rlwrap sbcl --noinform --core /cache/miur.core --eval '(use-package :cl)'
}


fn_alias[s]=swank
function swank {
  # print "USAGE: M-x slime-connect <Enter><Enter> DFL:(port 4005)"
  # exec sbcl --noinform --non-interactive --load ./loader.lisp  # =NIA
  # exec rlwrap sbcl --noinform --load ./loader.lisp  # =IA
  exec sbcl --noinform --core /cache/miur.core --non-interactive --load ./loader.lisp  # =CORE
  # --dynamic-space-size 8GB
}

fn_alias[b]=mkexe
function mkexe {
  # --no-sysinit --no-userinit
  # (sb-ext:disable-debugger)
  # :compression t
  sbcl --noinform --non-interactive --load ./compiler.lisp
}


fn_alias[c]=mkcore
function mkcore {
  sbcl --noinform --load ./coreimg.lisp
}


function _Main {
  if ((!$#)); then
    sed -rn '1d;/^(.*\\s)?#%/s///p' "$0"
    print "VIZ: ${(k)functions}"
    # print -lDaC2 -- ${(kv)functions_source}
    exit 0
  fi

  local cmd=$1
  shift

  local fn=$cmd
  while (($+fn_alias[$fn])); do fn=$fn_alias[$fn]; done
  if ((!$+functions[$fn])); then
    >&2 print "Err:(cmd=$cmd): not found fn=$fn"
    exit 1
  fi

  $fn $@
}

_Main $@
