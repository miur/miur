%%%%% Arch

%%%% Graph

VIZ.
  ui
  view
  cursor
  dom

E.G.
  ui
    > event (+) keymap
        > self
          chg view setting + refresh
        > miur-core
          send command
            = if *core* manages state => sync cmd (wait on results)
              ENH: *core* launches thread with command and returns immediately
              BUT: *ui* must monitor 'state updated' signal
            = if *ui* manages state => async cmd (you can keep browse same dir)
            ?? sync and wait ??
    < signal
      E.G. 'state updated' -> 'pull required'
  core
    < receive command
      > dispatch + process
        > return 'job state'
        > return current *dom*
      > notify 'state updated'

%%% Structure

%% Mod
  * main
    - read/parse its own config, (*ui* also has keymap)
  * multithreading
    - waiting main thread
    - listening/working threads
    - spawning (*core* only)
  * state
    - provides (exports) list of smth (struct)
    - has focus on smth (state of struct in general)
  * data flow
    - query
    - convert (here altr impl is diff)
    - cache (their own representation)
  * commands
    - dispatch (universal *io*)
      = control smth provided, change state
      = pass unrelated cmds further down/up
      = return err on non-existent command
      = list of supported *api* commands may be queried
    - execute
    - send cache


%% Impl

%   ui
    altr: 3d, gui, web, tui, vim, cli, pipe, test_mock, ...
    goal:
      = multiple processes with several windows each attached to single *view*/*cursor*
      user interaction
      map (approximate) *view* to concrete framework api
    cache: framework objects hierarchy
    provides:
      colorscheme
        future: derive individual colorscheme from universal combined *colorscheme*
      [state] hide/show/fullscr objs (cached framework hierarchy)
        = allowed only temporal insignificant changes
        = framework layout is based on view layout, but not completely equal
          => *view* layout is not touched
        ! can be dumped/loaded on restart (save session)
    *itpr*:
      converts keys to cmds before inserting them into dispatcher
    dispatch:
      react on resizing events directly by *ui* itself

%   view
    goal:
      = attached to single *cursor*, but support for multi-cursor implemented anyway
        (no sense to display non-related cursor info if there is no interaction in-betwee)
      if *ui* crashes -- reconnect and get _exactly_ the same view as before
      if *cursor* crashes -- *ui* must simply re-fetch content into their widgets
      dump *view* to disk and restore between sessions
      share *view* between preview programs (zoom, pos)
    cache:
      layout
      bindings between widgets and *cursor*(s), which provide content for widget
        =>
    provides:
      layout (relative positionings = advices to ui)
      access to widgets content (relay/props to *cursor*)
        = widget == ~window~ to *cursor*, and has no list inside itself
      widgets state (abstract representation)
        - no fixed width/height : shared *ui* has different size
        - no list crop : need full list of displayed items
        - only relative scrolling : no way to predict scroll itself
          = impossible to implement : scrolloff/scrolljump
            NEED to know exact count N displayed in widget
            ALSO this N must be the same in all *ui*
      TEMP:(here) provide widgets itself
        viewing different graph slices
    dispatch:
      switch view to another
        predefined or constructed on the site
      choose focused widget

%   cursor
    goal:
      projection of *dom*
      minimize traffic
        partial/framed view (for long lists)
      keep navigation fast w/o re-accessing *dom*
      refreshing / verifying
        dir state can become changed in time between operations
        NEED verify integrity before applying operations
          = what user see must be equal to actual state of remote fs
          = only then confirm operation
    cache:
      received *dom* frames
        old frames marked 'dirty' (pending to sync/trash)
      pending operations
        = only with visual representation
        E.G: move/copy/delete files -- mark as 'pending' when send command to *core*
      filtering/sorting mask
    provides:
      TEMP:(here) provide operations on graphs
        abstract graphs manipulation
    ?? allow to contol/modify list/tree itself OR inside *dom* only ??
      * read only access to *dom*
      * allow modifying => so list can be loaded from stdin
        => then loaded from stdin and edited list can be used as selector for query to *core*
        => you can even delete all entries you don't like from this list w/o affecting *dom*
          USAGE: offline (detached):  pipe 'ag' results by stdin and filter in graph *ui*
          ALT: instead of 'delete' use 'temporarily hide' on undesirable entries
      sort order
      filtering
        ? is there need to gain access to filtered list from independent viewer ?
          MAYBE query 'filtered' view from *cursor* back to *dom* on demand ?
      selection
    allow preview to stick to
      cursor
        load another img on cursor move
      choosen dir / file / selection
        stick to path and refresh img on file change
        ! allow even inexistant files
          - show when them are created
          - remove when them are deleted
    read tree from stdin into *cursor*
      ? or better read it only into *core* ?
      ? or directly into *ui* ?
    multiple *ui* for one cursor
      navigate file from fm
      kepp curr file preview in sync
    multiple *preview* for one file
      some settings may be shared
        like relative position
        :: fallback set -c pos
      some settings -- individual
        like zoom
        set -v zoom
      Result: multizoom preview for images
        * use 'local' settings for individual parts
        * define signal to reset 'local' settings on preview
          = to regain preview control from
    external preview
      copy file through net to /tmp
      view through independent image viewer

%   dom
    goal:
      incremental loading (for long file lists)
      async update (long operations)
        properties <= providers <= accessors
          relay requests
    cache:
      reflection of all connected *cursor*/*ui*
      cache /dir/* list, path coords
        each other *cursor*/*ui* reuses already cached results
        keep cache in sync with underlying fs
        update cache with query on each explicit {timer,poll,inotify}
        pause refreshing
          view dir which changes too fast
          immediate dirty snapshot may be broken
          at least it allows to understand situation
      history + undo
      search results

%   accessor
    ??? (dispatcher) is there need to specify cmds directly to them ???
      OR use them only through *core*
    ! *cursor*'s reflection is completely competent accessor
      * provides access to filter lists, cursor, view layout, etc
      * allows contolling of *ui* execution
      * sends *dom* and *preview* data to display on *ui*'s end


%% Interlayer

  *itpr*
    * directly imported/linked to concrete *ui* (as module/shared lib)
    * each *ui* has its own *keymap* overlay on top of universal combined *keymap*
      one for each ui kind OR universal one
      allow remap (one-time local online changes) for each *ui* _instance_
    * each widget can have its own keymap
      => at least remap subset of keys and fallback all other
      = :map -t <wdg_nm> <key> <cmd> <comment>
        SEE: man on zsh_zle, mutt_keymap
      query focused widget from *view* before applying *keymap*

  *conf*
    each *mod* has its own *conf* overlay on top of universal combined *config*
    HACK: configs for any *mod* can be sent by network directly
      => no need for *conf* file on remote systems
      ?? XXX: if several users use the same remote *core* and need different *conf*
        ~ run its own core for each user
        ~ change architecture, so *core* won't need any *conf* at all
        ~ attach received 'virtual' *conf* to user's *cursor* reflection
          = and switch actual *conf* before any execution depending on which user/*cursor* sent cmds
          MAYBE:ALSO:USE: in any other dispatcher ?

  *dispatcher*
    change focus, state
      BAD: we must parse command with arguments in each dispatcher !
        ALT:(not better) consult independent dispatcher (single shared one)
    pass unrelated cmds further down/up
      = depending on original flow: *core* -> *ui*, *ui* -> *core*
      = depending on cmd: *ui* -> *view* -> broadcast to all *ui*
        BUT: each joint must know which cmds are 'up' and which are 'down'
        ALT: prepend each cmd with dst prf
          # :(send|run|exec|eval) -t core <cmd> <args>
          ++ commands can have the same name in different *mod*
      ! wrong command = how to know it's wrong ?
        ~ must traverse through all *mod* and gather all-errors list
          BAD: delays on slow connection before error will be known
        ~ keep copy of all commands list in each *mod*
        ~ consult independent dispatcher
          +1 list of commands loaded only into this single *mod*
          -1 all cmds will be delivered after detour by *core*
          -1 no support for 'offline' *ui* mode -- for graph manipulation only

  *relay*
    = any means of *mod* communication
    VIZ.
      identify
      connect
      relay data
    E.G.
      inner
        essential modules
      interprocess
        core / ui
        whole servers

  Back-api
    register each *cursor* in *dom*
      and each *view* register in *cursor*
      export access/control *api* back to *dom*
      query cursor/view settings from another cursor through *dom*/*core*
        bittorent sync all cached info in cursors ?
      !! any *cursor* -- is no more then *accessor* in terms of *core* !!




Flow
  ??? [_] how to split 'selection' between *ui*/*core* ???
    ~ query whole dom and manage state in gui
      E.G.(functional) choose showed columns
      => no need to wait until whole *dom* transmitted
        query one list part at a time (frame)
          don't query anything more until user moves cursor
          query status (file count, etc) very first
          *ui* specifies which metainfo it needs now
          query hidden metainfo only on demand
        query whole, but show list along transmission
          user moves in bounds of already received cached list
          even if cursor stays in place, background transmission continues
          cancel transmission if dir was leaved

    ~ create client reflection in server and use gui _only_ for display
      E.G.(imperative) no action until response from server
      + multiple *ui* can have cursor in sync

    BETTER: flexible constructor
      many intermediate joints
        accessors (access point)
          ? == preview ? (WTF: what the difference?)
        dom (state point)
          independent dom can gather from many accessors
        cursor (sync point)
          can combine multiple remote machines in one interface
          BUT: inter-machine operations also require *core* on host
            => data sharing between remotes provided through host
              E.G. impossible direct connection (VPN, port forward, etc)
            => host's *core* only provides identification for remote *core*(s)
              < and their communication occurs directly
              < without traversing data through *host*
        ui (view point)
          has no user state, only colors
          simply queries all the objects it must draw
          all similar *ui* will show the same image
        display
          allows to show X and Wayland at the same time
      combine subsets under independent processes
        tight coupling / shared_mem in each subset
        communicate by sockets / shared_mem between adjacent joints
        each accessor -- may be placed in subsets independently
        subsets formed due to available resources on each involved system
      ? how to (dis)assemble subsets in runtime ?

    << Corner cases
      broken/restored connection
        => who must keep state to be effective
      low-resources target
        = stateless *core*
        = manages *dom* only
        = small cache -- frequently destroys *dom* branches
        = preview generated on host from received file (complete or partial)
      low-resources host
        = stateless *ui*
        = *core* manages all 'cursores'
        = preview generated on target, host views results only
      very low speed, great delay
        => state mgmt on which side makes it more responsive
      sync/share cursor state between *ui*
        ? why I may need this ?
          => control *gui* from _fifo_ -- on _vim_ exit, etc
      cursor moves down fast
        ~ sync -- send cursor state for each entry and wait on response
        ~ async -- send for each
        ~ async -- send state once a time or when long hover over entry
          skips through files when moving
          need *ui*'s own state
          => world state prediction and correction
            E.G. similar to "counter-strike"
      edit file in pager by headless neovim
        ~ receive file from target and edit on host (E.G. ftpfs, sshfs, curlfs)
        ~ edit on target and send from host only keys
          BUT: connection must become _sync_ : screen must be refreshed on each key press
