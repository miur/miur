%%%%% Manipulation
macro/scripting

aliases
  user-defined combo from other sets

native commands set
  fm operations
  ? written in native code
  ? separate module

sam's structural regex
  apply to files in dir

shell
  apply commands directly
  DEV: more intuitive way then %s, etc

nvim
  ex commands
  manipulate filenames in dir as plain text file

ipython
  manipulation

Lisp/guile
  directly typing commands

J
  useful for list manipulation
  try over numeric cheatsheets, etc

textobj
  * files with identical prf/joint/sfx/ext
  * use next immediate filter as textobj mask
  * search results for curr dir
  E.G.
    minicom provider -- sort by name -- choose all lines with 'INFO' prefix
    fs -- directly select/yank all files with ext w/o filtering dir beforehand

ALSO
  make bindings to *miur* for each of lang in question
    E.G. miur.eval('...')
    => allows to use scripts written completely in target lang
      = source them from cmdline (headless scripting)
    => make possible to script actions even on Windows (w/o bash)
      BUT: you need to send cmds backward:  *core* -> *ui*
  prompt to directly type-in cmds in favorite language
    process file list
      like using {J} for processing spreadsheet virtual view
    send command to *miur* itself
      some langs have more compact syntax for chaining, etc


%% Redo
  !! NEED heuristic which operations are pending and which are immediate
  THINK: press ':save' explicitly after making rename on :s/../../g ?
  queue all actions and do in sync/async bkgr mode
  ':save' for virtual graphs results in saving their respective files
  for search results ':save' works as text file saving
    OR create my own format to save fs DOM used by fm
  you can create virtual archive with name, open it and copy files there,
  \ and then by ':save' initiate actual archiving operation
    show those 'copied' files with different color to emphase their ephemeral nature
  ALSO you can see 'diff' for all your pending operations
